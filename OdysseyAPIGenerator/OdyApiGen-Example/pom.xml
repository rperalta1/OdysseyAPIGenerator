<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
 
  <modelVersion>4.0.0</modelVersion>
  <groupId>gov.nmcourts.odyssey.apis</groupId>
  <artifactId>OdyApiGen-Example</artifactId>
  <version>0.0.1-SNAPSHOT</version>  
  
  <name>OdyApiGen-Example</name>
  
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  
	<dependencies>
  		<dependency>
    		<groupId>com.google.guava</groupId>
	    	<artifactId>guava</artifactId>
	    	<version>10.0</version>
		</dependency>
		
		<dependency>
    		<groupId>log4j</groupId>
    		<artifactId>log4j</artifactId>
    		<version>1.2.16</version>
		</dependency>
		
		<!-- 
		  	  When the library is generated with Maven it will be available on the local Maven repository. Therefore, 
		  	  shared library can be added to a project by using a Maven dependency as given lines below. 
			  Another option is to copy the generated JAR file, available under the target folder; library project,
			  add it to a project, and then add it to the Build Path.
		-->
		
		<dependency>
  			<groupId>gov.nmcourts.odyssey.apis</groupId>
  			<artifactId>OdyApiGen-Library</artifactId>  			
  			<version>2017</version>  		
  		</dependency>
  		
  	</dependencies>
  	
  	<build>
  	
  	<pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
      <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
      	<plugin>
      	<groupId>org.eclipse.m2e</groupId>
      	<artifactId>lifecycle-mapping</artifactId>
      	<version>1.0.0</version>
      	<configuration>
      		<lifecycleMappingMetadata>
      			<pluginExecutions>
      				<pluginExecution>
      					<pluginExecutionFilter>
      						<groupId>
      							org.apache.maven.plugins
      						</groupId>
      						<artifactId>
      							maven-clean-plugin
      						</artifactId>
      						<versionRange>[3.0.0,)</versionRange>
      						<goals>
      							<goal>clean</goal>
      						</goals>
      					</pluginExecutionFilter>
      					<action>
      						<ignore></ignore>
      					</action>
      				</pluginExecution>
      				
      			</pluginExecutions>
      		</lifecycleMappingMetadata>
      	</configuration>
      	</plugin>
      </plugins>
    </pluginManagement>
    
   	<plugins>
   	
   		<plugin>
  			<groupId>org.apache.maven.plugins</groupId>
  			<artifactId>maven-antrun-plugin</artifactId>
  			<version>1.7</version>
  			<executions>
      			<execution>
				<id>cleaning-files</id>
          			<phase>clean</phase>
          			<configuration>
              			<target>              				
              				<delete dir  ="target" failonerror="false"/> 
              				<delete file ="downtest.pdf"/>              				
              			</target>
          			</configuration>
          			<goals>
              			<goal>run</goal>
          			</goals>
      			</execution>
      
  			</executions>
     	</plugin>
   	
		<plugin>
	    	<groupId>org.apache.maven.plugins</groupId>
	        <artifactId>maven-compiler-plugin</artifactId>
	        <version>3.7.0</version>
	        <configuration>
	        	<source>1.8</source>
	            <target>1.8</target>                
	        </configuration>
		</plugin>	   
	        
	    <plugin>
           	<groupId>org.codehaus.mojo</groupId>
           	<artifactId>exec-maven-plugin</artifactId>
           	<version>1.2.1</version>           	
           	<configuration>
           		<mainClass>example.ExampleAPIs</mainClass>               	
           	</configuration>
        </plugin>	        
	          	
  	</plugins>
  </build>
  	
</project>